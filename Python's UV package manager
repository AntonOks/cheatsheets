####Python's UV package/virtualenv manager


# On macOS and Linux:
    curl -LsSf https://astral.sh/uv/install.sh | sh

## To install a python version in the enviroment:

    uv python install 3.12.16

## To list all python versions installed and avaiable to download:

    uv python list

## To run the desired python version:

Update the .toml file to the desired version (for example requires-python = ">=3.12") and then in CLI:

    uv python pin 3.12.16

## To create a virtualenv:

    uv venv --python 3.12.16

## To activate the virtual enviroment:

    source .venv/bin/activate

## To uv can update itself to the latest version:

    uv self update

##To start a new project:

    uv init my_project

## To start a new library:

    uv init --lib

## To start a new python package:

    uv init --package

## To start a new app:

    uv init --app

## To run the python file (this will install the dependencies too):

    uv run hello.py

## To sync uv for new (manually typed) dependencies:

    uv sync

## To add a package to the dependancies:

    uv add pandas

    uv add pandas fastapi

## To remove a packages (and all its dependancies):

    uv remove pandas

## To upgrade a package to its latest version in the lock file:

    uv lock --upgrade package pandas

## If another project is created inside of another project, they will share the same lock file, the same enviroment, but if you don't want that, then the --no-workspace needs to be added:

    uv init another_project --no-workspace

## To check the python code (like ruff Python's linter) for any static code issues (unused imports, missing imports, style issues, circular imports):

    uvx ruff check

## To install, unistall or upgrade tools:

    uv tool install ruff

    uv uninstall ruff

    uv upgrade ruff

## To update uv tools (good to run for the first time):

    uv tool update-shell

## To list all functions:

uv

  run      Run a command or script
  init     Create a new project
  add      Add dependencies to the project
  remove   Remove dependencies from the project
  sync     Update the project's environment
  lock     Update the project's lockfile
  export   Export the project's lockfile to an alternate format
  tree     Display the project's dependency tree
  tool     Run and install commands provided by Python packages
  python   Manage Python versions and installations
  pip      Manage Python packages with a pip-compatible interface
  venv     Create a virtual environment
  build    Build Python packages into source distributions and wheels
  publish  Upload distributions to an index
  cache    Manage uv's cache
  self     Manage the uv executable
  version  Display uv's version
  help     Display documentation for a command






